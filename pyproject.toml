[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
# Convention is to use lowercase and hyphens for the package name
name = "mfnets-surrogates"
description = "Multifidelity surrogate networks"
# Point to your README file
readme = "README.md"
requires-python = ">= 3.10"
license = {text = "MIT License"}
version = "0.0.1"
keywords = [
    "Networks",
    "Graph Theory",
    "Mathematics",
    "Uncertainty Quantification",
    "Multifidelity Modeling",
]
authors = [
  { name = "Alex Gorodetsky", email = "alex@alexgorodetsky.com" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]

# --- Core Dependencies ---
# These are the essential packages required for your library to run.
dependencies = [
  "numpy>=1.24", # Loosen the pin from ~=2.1.0 unless you have a specific reason
  "matplotlib",
  "scipy",
  "networkx",
  "jax",
  "optax",
]

# --- Optional Dependencies ---
# These are "extras" that can be installed as needed.
# Example installation:
#   pip install .[test]
#   pip install .[dev]
#   pip install .[all]
[project.optional-dependencies]
torch = [
    "torch",
    "pyro-ppl",
]
# For users who need pydantic/yaml features
extras = [
    "pydantic",
    "scikit-learn",
    "pandas",
    "matplotlib", # for plotting
    "pyyaml>=6.0",
]
test = [
    "pytest",
]
dev = [
    "mfnets-surrogates[test,torch,extras]", # Include other extras in the 'dev' group
    "ruff",
    "mypy",
]
# An 'all' group is a common convenience
all = ["mfnets-surrogates[dev,torch,extras]"]


[project.urls]
Documentation = "https://www.alexgorodetsky.com/mfnets_surrogate_code/net.html"
Issues = "https://github.com/goroda/MFNetsSurrogates/issues"
Source = "https://github.com/goroda/MFNetsSurrogates"


[tool.setuptools]
packages = ["mfnets_surrogates"]


# --------------------------------------------------------------------------
# --- Tooling Configuration ---
# All linting, formatting, and type checking is configured below.
# Pylint and Flake8 configurations have been removed in favor of Ruff.
# --------------------------------------------------------------------------

[tool.ruff]
# Define the directories Ruff should scan.
include = ["mfnets_surrogates/**/*.py", "tests/**/*.py", "pyproject.toml"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
]
line-length = 88  # The modern standard, matching Black formatter.
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# A more comprehensive set of rules to replace flake8 and pylint.
# See the Ruff documentation for what each code means.
select = [
    "F",   # Pyflakes (syntax errors)
    "E",   # Pycodestyle (style errors)
    "W",   # Pycodestyle (style warnings)
    "I",   # isort (import sorting)
    "B",   # flake8-bugbear (common bugs)
    "C4",  # flake8-comprehensions (unnecessary comprehensions)
    "UP",  # pyupgrade (use modern syntax)
    "D",   # pydocstyle (docstring conventions)
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D103"] # Missing docstring in public function for tests

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.mypy]
# Keep your mypy settings, they are good.
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = ["mfnets_surrogates/"]
plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = [
    'networkx',
    'h5py',
    'matplotlib',
    'matplotlib.pyplot',
    'pydantic'
]
ignore_missing_imports = true
